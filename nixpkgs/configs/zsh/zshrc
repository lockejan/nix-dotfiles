# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
# Emacs style
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line
# Vi style:
# zle -N edit-command-line
# bindkey -M vicmd v edit-command-line

# brew sbin folder
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="$PATH:$HOME/bin"

# export NIX_PATH=darwin-config=$HOME/.nixpkgs/darwin-configuration.nix:$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
# source $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh
export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH

if [[ -f "$HOME/.sdkman/bin/sdkman-init.sh" ]]; then
  source "$HOME/.sdkman/bin/sdkman-init.sh"
fi

nixify() {
  if [ ! -e ./.envrc ]; then
    echo "use nix" >.envrc
    direnv allow
  fi
  if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]]; then
    cat >default.nix <<'EOF'
with import <nixpkgs> {};
mkShell {
  nativeBuildInputs = with pkgs; [
    bashInteractive
  ];
}
EOF
    ${EDITOR:-vim} default.nix
  fi
}

flakify() {
  if [ ! -e flake.nix ]; then
    nix flake new -t github:nix-community/nix-direnv .
  elif [ ! -e .envrc ]; then
    echo "use flake" >.envrc
    direnv allow
  fi
  ${EDITOR:-vim} flake.nix
}

lsp-update() {
  tag=$1
  pushd ~/.cache/nvim/nlua/sumneko_lua
  old_hash=$(git rev-parse HEAD)
  git fetch --tags

  if [[ -z $tag ]]; then
    tag=$(git describe --tags $(git rev-list --tags --max-count=1))
  fi

  git checkout $tag
  new_hash=$(git rev-parse HEAD)

  if [[ $old_hash != $new_hash ]]; then
    cd 3rd/luamake
    compile/install.sh
    cd ../..
    ./3rd/luamake/luamake rebuild
  else
    echo "$tag already compiled. Nothing to do!"
  fi
  popd
}

nvim-update() {
  nvim --headless +'autocmd User PackerComplete quitall' +PackerSync
}

# Search content and Edit
search-edit() {
  fileline=$(rg -n ''${1:-.} | fzf | awk '{print $1}' | sed 's/.$//')
  $EDITOR ''${fileline%%:*} +''${fileline##*:}
}

filter-log() {
  git log --oneline --color=always | fzf --ansi --preview="echo {} | cut -d ' ' -f 1 | xargs -I @ sh -c 'git log --pretty=medium -n 1 @; git diff @^ @' | bat --color=always" | cut -d ' ' -f 1 | xargs git log --pretty=short -n 1
}

get-gpg-fingerprint() {
  gpg -K | fzf | sed 's/ //g' | cut -d "=" -f2- | pbcopy
}

install-java(){
  sdk install java $(sdk list java | fzf | awk '{print $NF}')
}

# export-pub-key () {
#     get-fingerprint | gpg --armor --export - 2>&1 | tee ~/gpg-pub-$(date +%F).asc
# }

diff-dir() {
  for files in $(diff -rq $1 $2 | grep 'differ$' | sed "s/^Files //g;s/ differ$//g;s/ and /:/g"); do
    nvim -d ${files%:*} ${files#*:} -c "norm ]c"
  done
}

alias \$=''
